// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    struct Student {
        uint id;
        string name;
        uint age;
    }

    Student[] public students;
    uint public studentCount = 0;

    // Event to emit when a new student is added
    event StudentAdded(uint id, string name, uint age);

    // Function to add a new student
    function addStudent(string memory _name, uint _age) public {
        students.push(Student(studentCount, _name, _age));
        emit StudentAdded(studentCount, _name, _age);
        studentCount++;
    }

    // Function to get a student by id
    function getStudent(uint _id) public view returns (uint, string memory, uint) {
        require(_id < studentCount, "Student does not exist.");
        Student memory s = students[_id];
        return (s.id, s.name, s.age);
    }

    // Fallback function to handle unexpected calls or Ether sent to contract
    fallback() external payable {
        // Custom logic can be added here if needed
    }

    // Function to receive Ether
    receive() external payable {}
}
